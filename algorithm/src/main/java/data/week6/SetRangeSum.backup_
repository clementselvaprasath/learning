import com.sun.tools.jdi.Packet;

import java.io.*;
import java.util.*;

public class SetRangeSum {

    public static final int MODULO = 1000000001;

    Node root = null;

    BufferedReader br;
    PrintWriter out;
    StringTokenizer st;
    boolean eof;

    SetRangeSum() throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        out = new PrintWriter(System.out);
        solve();
        out.close();
    }

    void solve() throws IOException {
        int n = nextInt();
        int last_sum_result = 0;
        for (int i = 0; i < n; i++) {
            char type = nextChar();

            switch (type) {
                case '+' : {
                    int x = nextInt();
                    insert((x + last_sum_result) % MODULO);
                } break;
                case '-' : {
                    int x = nextInt();
                    erase((x + last_sum_result) % MODULO);
                } break;
                case '?' : {
                    int x = nextInt();
                    out.println(find((x + last_sum_result) % MODULO) ? "Found" : "Not found");
                } break;
                case 's' : {
                    int l = nextInt();
                    int r = nextInt();
                    long res = sum((l + last_sum_result) % MODULO, (r + last_sum_result) % MODULO);
                    out.println(res);
                    last_sum_result = (int)(res % MODULO);
                }
            }
        }
    }

    // Code that uses splay tree to solve the problem

    void insert(int x) {
        Node node = find(root, x);
        if (node.key == x) throw new RuntimeException("duplicate key for insertion");

        Node inserted = new Node(x, x, null, null, node);
        node.left = inserted;
    }

    void erase(int x) {
        Node node = find(root, x);
        if (node == null) return;

        if (node.right == null) {
            Node promoted = node.left;
            Node parent = node.parent;

            if (parent != null) parent.setChild(promoted);
            if (promoted != null) promoted.parent = parent;
        }
    }

    boolean find(int x) {
        // Implement find yourself

        return false;
    }

    long sum(int from, int to) {
        VertexPair leftMiddle = split(root, from);
        Node left = leftMiddle.left;
        Node middle = leftMiddle.right;
        VertexPair middleRight = split(middle, to + 1);
        middle = middleRight.left;
        Node right = middleRight.right;
        long ans = 0;
        // Complete the implementation of sum

        return ans;
    }

    void update(Node v) {
        if (v == null) return;
        v.sum = v.key + (v.left != null ? v.left.sum : 0) + (v.right != null ? v.right.sum : 0);
        if (v.left != null) {
            v.left.parent = v;
        }
        if (v.right != null) {
            v.right.parent = v;
        }
    }

    void smallRotation(Node v) {
        Node parent = v.parent;
        if (parent == null) {
            return;
        }
        Node grandparent = v.parent.parent;
        if (parent.left == v) {
            Node m = v.right;
            v.right = parent;
            parent.left = m;
        } else {
            Node m = v.left;
            v.left = parent;
            parent.right = m;
        }
        update(parent);
        update(v);
        v.parent = grandparent;
        if (grandparent != null) {
            if (grandparent.left == parent) {
                grandparent.left = v;
            } else {
                grandparent.right = v;
            }
        }
    }

    void bigRotation(Node v) {
        if (v.parent.left == v && v.parent.parent.left == v.parent) {
            // Zig-zig
            smallRotation(v.parent);
            smallRotation(v);
        } else if (v.parent.right == v && v.parent.parent.right == v.parent) {
            // Zig-zig
            smallRotation(v.parent);
            smallRotation(v);
        } else {
            // Zig-zag
            smallRotation(v);
            smallRotation(v);
        }
    }

    // Makes splay of the given vertex and returns the new root.
    Node splay(Node v) {
        if (v == null) return null;
        while (v.parent != null) {
            if (v.parent.parent == null) {
                smallRotation(v);
                break;
            }
            bigRotation(v);
        }
        return v;
    }

    // Searches for the given key in the tree with the given root
    // and calls splay for the deepest visited node after that.
    // Returns pair of the result and the new root.
    // If found, result is a pointer to the node with the given key.
    // Otherwise, result is a pointer to the node with the smallest
    // bigger key (next value in the order).
    // If the key is bigger than all keys in the tree,
    // then result is null.
    Node find(Node root, int key) {
        Node found = doFind(root, key);
        return splay(found);
    }

    Node doFind(Node root, int key) {
        Node node = root;

        while (node != null) {
            if (node.key == key) return node;

            if (node.key > key) {
                if (node.left == null) return node;
                node = node.left;
            } else if (node.key < key) {
                node = node.right;
            }
        }

        return node;
    }

    Node next(Node node) {
        if (node.right != null)
            return findLeftDescendant(node.right);
        else
            return findRightAncestor(node);
    }

    Node findLeftDescendant(Node node) {
        Node descendant = node;
        while (descendant != null) {
            if (descendant.left == null) return descendant;
            descendant = descendant.left;
        }

        return descendant;
    }

    Node findRightAncestor(Node node) {
        Node ancestor = node;
        while (ancestor != null) {
            if (ancestor.key < ancestor.parent.key) return ancestor.parent;
            ancestor = ancestor.parent;
        }

    }

    VertexPair split(Node root, int key) {
        VertexPair result = new VertexPair();
//        VertexPair findAndRoot = find(root, key);
//        root = findAndRoot.right;
//        result.right = findAndRoot.left;
//        if (result.right == null) {
//            result.left = root;
//            return result;
//        }
//        result.right = splay(result.right);
//        result.left = result.right.left;
//        result.right.left = null;
//        if (result.left != null) {
//            result.left.parent = null;
//        }
//        update(result.left);
//        update(result.right);
        return result;
    }

    Node merge(Node left, Node right) {
        if (left == null) return right;
        if (right == null) return left;
        while (right.left != null) {
            right = right.left;
        }
        right = splay(right);
        right.left = left;
        update(right);
        return right;
    }

    // Node of a splay tree
    class Node {
        int key;
        // Sum of all the keys in the subtree - remember to update
        // it after each operation that changes the tree.
        long sum;
        Node left;
        Node right;
        Node parent;

        Node(int key, long sum, Node left, Node right, Node parent) {
            this.key = key;
            this.sum = sum;
            this.left = left;
            this.right = right;
            this.parent = parent;
        }

        void setChild(Node node) {
            if (this.key > node.key)
                this.left = node;
            else
                this.right = node;
        }
    }

    class VertexPair {
        Node left;
        Node right;
        VertexPair() {
        }
        VertexPair(Node left, Node right) {
            this.left = left;
            this.right = right;
        }
    }

    String nextToken() {
        while (st == null || !st.hasMoreTokens()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (Exception e) {
                eof = true;
                return null;
            }
        }
        return st.nextToken();
    }

    int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }
    char nextChar() throws IOException {
        return nextToken().charAt(0);
    }

    public static void main(String[] args) throws IOException {
        new SetRangeSum();
    }

}
