import java.util.*;

public class NegativeCycle {

    private final Vertex[] vertices;

    private int iteration = 0;

    public NegativeCycle(int numberOfVertices) {
        vertices = new Vertex[numberOfVertices];
        initialize(numberOfVertices);
    }

    public int negativeCycle() {
        for (Vertex v : vertices) {
            if (!v.isInfinite()) continue;

            Log.i("start iterations... i: %d", iteration);

            boolean negative = run(v.id);
            if (negative) return 1;

            iteration++;
        }

        return 0;
    }

    private boolean run(int s) {
//        for (Vertex v : vertices) {
//            v.distance = Vertex.INFINITE;
//            v.prev = null;
//        }

        vertices[s].distance = 0;

        for (int i = 0; i < vertices.length - 1; i++) {
            executeBF();
        }

        Log.i("---------------------------------");
        Log.i("execute last BF...");
        Log.i("---------------------------------");
        return executeBF();
    }

    // return whether relaxation is occurred
    private boolean executeBF() {
        boolean relaxed = false;

        for (Vertex u : vertices) {
            Log.i("relaxing edges of vertex: %d", u.id);

            if (u.isInfinite() || (u.iteration < this.iteration)) continue;

            for (Edge e : u.out) {
                Vertex v = e.to;
                Log.d("out edge: %d\n", v.id);
                if (v.compare(u.distance + e.weight) <= 0) continue;

                v.prev = u;
                v.distance = u.distance + e.weight;
                v.iteration = this.iteration;

                Log.d("set new distances... v: %d, distance: %d, weight: %d", v.id, v.distance, e.weight);
                relaxed = true;
            }
        }

        return relaxed;
    }

    public void add(int v1, int v2, int weight) {
        vertices[v1].add(vertices[v2], weight);
    }

    private void initialize(int numberOfVertices) {
        for (int i = 0; i < numberOfVertices; i++) {
            vertices[i] = new Vertex(i);
        }
    }

    private class Edge {

        Vertex to;

        int weight;

        Edge(Vertex to, int weight) {
            this.to = to;
            this.weight = weight;
        }

    }

    class Vertex {

        public static final int INFINITE = 1000000;

        int id;

        int distance = INFINITE;

        Vertex prev;

        int location;

        int iteration = INFINITE;

        List<Edge> out = new ArrayList<>();

        Vertex(int id) {
            this.id = id;
        }

        boolean isInfinite() {
            return distance == INFINITE;
        }

        void add(Vertex v, int weight) {
            this.out.add(new Edge(v, weight));
        }

        int compare(int distance) {
            Log.d("compare... this.d: %d, o.d: %d", distance, distance);

            if (this.distance == distance) return 0;

            if (this.distance == INFINITE) return 1;
            if (distance == INFINITE) return -1;

            int compared = this.distance - distance;
            return compared > 0 ? 1 : -1;
        }

        int compare(Vertex o) {
            return compare(o.distance);
        }

        @Override
        public String toString() {
            return "Vertex{" +
                    "id=" + id +
                    ", distance=" + distance +
                    ", location=" + location +
                    '}';
        }
    }

    private static class Log {

        static int level = 0;

        static void d(String s, Object... o) {
            if (level >= 5) System.out.printf(s + "\n", o);
        }

        static void i(String s, Object... o) {
            if (level >= 4) System.out.printf(s + "\n", o);
        }

    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();

        NegativeCycle c = new NegativeCycle(n);

        for (int i = 0; i < m; i++) {
            int x, y, w;
            x = scanner.nextInt();
            y = scanner.nextInt();
            w = scanner.nextInt();

            c.add(x -1, y -1, w);
        }

        System.out.println(c.negativeCycle());
    }
}

